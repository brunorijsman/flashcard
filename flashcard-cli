#!/usr/bin/env node

const fs = require('fs')
const minimist = require('minimist')
const courseParser = require('./course-parser.js')

var verbose = false

function fatalError (errorMsg, verboseErrorMsg = null) {
  if (verbose && verboseErrorMsg) {
    console.error(errorMsg + ' (' + verboseErrorMsg + ')')
  } else {
    console.error(errorMsg)
  }
  process.exit(1)
}

function verboseMsg (msg) {
  if (verbose) {
    console.info(msg)
  }
}

function commandLineError (errorMsg) {
  console.error(errorMsg + '\n')
  reportUsageAndExit(1)
}

function reportUsageAndExit (exitCode) {
  command = extractFileNameFromPath(process.argv[1])
  console.error('Usage:')
  console.error('  ' + command + ' --help')
  console.error('  ' + command + ' [options] check <filename>')
  console.error('  ' + command + ' [options] annotate <filename>')
  console.error('\nOptions:')
  console.error('  --verbose -v')

  process.exit(exitCode)
}

function unknownOption (option) {
  if (option[0] == '-') {
    commandLineError('Unknown option ' + option)
  }
  return true
}

function extractFileNameFromPath (path) {
  return path.split('\\').pop().split('/').pop()
}

function parseJustFileName (xargs) {
  if (xargs._.length < 1) {
    commandLineError('Missing <filename>')
  }  
  const fileName = xargs._.shift()
  if (xargs._.length > 0) {
    commandLineError('Unexpected extra arguments after <filename>')
  }  
  return fileName
}

function main () {
  const options = {
    boolean: ['verbose'],
    alias: {h: 'help', v: 'verbose'},
    stopEarly: false,
    unknown: unknownOption
  }
  const xargs = minimist(process.argv.slice(2), options)
  if (xargs.help) {
    reportUsageAndExit(0)
  }
//  xargs._ = ['annotate', 'aws-certified-solutions-architect-associate.fcx']  // DEBUG
  if (xargs._.length < 1) {
    commandLineError('Missing command; valid commands are: check, annotate')
  }
  verbose = xargs.verbose
  const command = xargs._.shift()
  const lowerCommand = command.toLowerCase()
  if (lowerCommand === 'check') {
    runCheckCommand(parseJustFileName(xargs))    
  } else if (lowerCommand === 'annotate') {
    runAnnotateCommand(parseJustFileName(xargs))    
  } else {
    commandLineError('Unknown command ' + command)
  }
}

function readCourse (parser, fileName) {
  let buffer = null
  try {
    buffer = fs.readFileSync(fileName)
  } catch (error) {
    fatalError('Could not open file ' + fileName, error.message)
  }
  const courseDefinition = String(buffer)
  const course = parser.parse(courseDefinition)
  return course
}

function runCheckCommand (fileName) {
  const parser = new courseParser.Parser()
  const course = readCourse(parser, fileName)
  verboseMsg('Course definition file : ' + fileName)
  verboseMsg('Correctness            : correct (no errors)')
}

function runAnnotateCommand (fileName) {
  const parser = new courseParser.Parser()
  const course = readCourse(parser, fileName)
  console.info(parser.generateDefinitionText())
}

main()
